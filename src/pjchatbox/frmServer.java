//1
//Nguyen Khac Huy - 2280601183
//1
package pjchatbox;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketException;
import java.net.UnknownHostException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public class frmServer extends javax.swing.JFrame {

    //B2-Bien cuc bo
    private DefaultListModel<String> logModel = new DefaultListModel<>();
    private int port;//port
    private ServerSocket ss;//server
    private Socket socket;//D.tuong K,noi

    private String ipServer;

    private Thread thread_1;
    private Thread threadListener;

    private BufferedReader in;
    private PrintWriter out;

    //CTC
    public void CleanTxtSend() {
        //txtInHoa.setText("");
    }

    //4.1 port hop le?
    public static boolean isValidPort(String input) {
        try {
            int port = Integer.parseInt(input.trim());
            return port >= 1000 && port <= 9999;
        } catch (NumberFormatException e) {
            return false; // không phải số
        }
    }

    //4.2 set button+status: Close
    public void CloseButtonServer() {
        labelStatus.setText("Đang: Tắt");
        btnOnOff.setText("Mở Server");
    }

    //4.3 set button+status: Open
    public void OpenButtonServer() {
        labelStatus.setText("Đang: Bật");
        btnOnOff.setText("Đóng Server");
    }

    //4.4 Chep Log
    private void log(String msg) {
        String line = java.time.LocalTime.now().withNano(0) + "  " + msg;
        javax.swing.SwingUtilities.invokeLater(() -> {
            logModel.addElement(line);
            int last = logModel.size() - 1;
            if (last >= 0) {
                lsHistory.ensureIndexIsVisible(last);
            }
        });
    }

    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(frmServer.class.getName());

    public frmServer() {
        initComponents();
        //tao log
        lsHistory.setModel(logModel);  // kết nối list với model

        //chen code: load()
        //1. lay IP server + Port
        ipServer = "";
        port = 0;
        try {
            // Lấy địa chỉ IP của máy đang chạy server
            InetAddress localHost = InetAddress.getLocalHost();
            ipServer = localHost.getHostAddress();
            System.out.println("Địa chỉ IP: " + localHost.getHostAddress());
        } catch (UnknownHostException e) {
            System.out.println("Không thể lấy IP của server!");
            e.printStackTrace();
        }
        txtIPServer.setText(ipServer);

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        btnOnOff = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        txtIPServer = new javax.swing.JTextField();
        txtPort = new javax.swing.JTextField();
        labelStatus = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lsHistory = new javax.swing.JList<>();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 0, 51));
        jLabel1.setText("Server: ");

        btnOnOff.setText("Bật Server");
        btnOnOff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOnOffActionPerformed(evt);
            }
        });

        btnClose.setText("Close");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        txtIPServer.setEditable(false);

        txtPort.setText("5555");

        labelStatus.setText("Đang: Tắt");

        jLabel2.setText("IP Server:  ");

        jLabel3.setText("Port: ");

        jScrollPane1.setViewportView(lsHistory);

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel4.setText("Server log: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(labelStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(131, 131, 131)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtIPServer, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnClose))
                                    .addComponent(jScrollPane1)))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(150, 150, 150)))
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(labelStatus)
                    .addComponent(btnOnOff, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(txtIPServer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28)
                .addComponent(btnClose)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_btnCloseActionPerformed


    private void btnOnOffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOnOffActionPerformed
        //M.1
        try {
            //start
            //BD
            //Đổi trạng thái
            if (labelStatus.getText().compareTo("Đang: Tắt") == 0) {
                //Bật
                OpenButtonServer();

                //CN port:
                String soPort = txtPort.getText();
                //kt
                if (!isValidPort(soPort)) {
                    JOptionPane.showMessageDialog(this, "Vui lòng nhập Port Hợp lệ: \n"
                            + "Hợp lệ: 1000->9999");
                    txtPort.setText("5555");
                    CloseButtonServer();
                    return;
                }
                port = Integer.parseInt(soPort);

                //C.hinh bien cuc bo
                //in tai console
                ss = new ServerSocket(port);
                System.out.println("Server: Open ServerSocket");
                System.out.println("Server Online on port: " + port);
                System.out.println("Waiting...");
                //chep vào log
                log("Server: Open ServerSocket");
                log("Server Online on port: " + port);
                log("Waiting...");

                //bo vao luong moi
                thread_1 = new Thread(() -> {
                    try {
                        socket = ss.accept();
                        System.out.println("Have A Client Connected");
                        //Todo-> xu lý khi dang co 1 connection

                        //tao bien de Doc/Gui
                        in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
                        out = new PrintWriter(socket.getOutputStream(), true);

                        //lang nghe
                        
                        
                        
                    } catch (SocketException ex) {//dong socket
                        System.out.println("Thông báo: " + ex);
                    } catch (Exception e) {
                        System.out.println("Error: " + e);
                    }

                });
                thread_1.start();
            } else {
                //Tắt
                CloseButtonServer();
                //Đóng K.Nối có kiểm tra
                if (socket != null && !socket.isClosed()) {
                    socket.close();
                    System.out.println("Server: Đã đóng Socket");
                    log("Server: Đã đóng Socket");

                    //clear log
                    logModel.clear();
                }
                if (ss != null && !ss.isClosed()) {
                    ss.close();
                    System.out.println("Server: Đã đóng ServerSocket");
                    log("Server: Đã đóng ServerSocket");

                    //clear log
                    logModel.clear();
                }

            }

            //end
        } catch (Exception e) {
            System.out.println("Error: " + e);
        }
    }//GEN-LAST:event_btnOnOffActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new frmServer().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnOnOff;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelStatus;
    private javax.swing.JList<String> lsHistory;
    private javax.swing.JTextField txtIPServer;
    private javax.swing.JTextField txtPort;
    // End of variables declaration//GEN-END:variables

    //CTC
}
